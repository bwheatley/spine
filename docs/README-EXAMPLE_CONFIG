This document attempts to explain the layout of the example config distributed
with spine.

While the example config is a good place to start, much customization must be
done to realize the power of spine in your environment.

ASSUMED HOST SETUP
This example uses a fairly basic setup. It assumes you have a few different
types of systems: web, dns, etc. and that those are separated into clusters.

Further, it assumes you have two types of clusters: prod and dev. It determines
this based on whether 'dev' is anywhere in the cluster name.

This example determines all this data from the hostname, but spine can use
any thing. In our case, hosts are assumed to be named:

   <class><num>.<cluster>.examplecorp.com

The tld in this case, doesn't matter at all, it's ignored here. examplecorp
is hardcoded in this example, but it need not be.

Classes are the basic devision of your systems, such as web servers, proxy
servers, dns servers, etc. The number next to class is just a way to number
the instances of a given class.

This could be arbitrarily simple or complex, we just picked this as simple
enough to have a workable example and complex enough to show the hierarchical
nature of spine.


THE BASIC LAYOUT

As one can see from the /local/config/policy_hierarchy file, the descend-order
spine will use is:

network/<network>
examplecorp/
examplecorp/<environment>
examplecorp/<environment>/<class>
host/<host>

The network/ directory is obviously where network-specific configs live.

The examplecorp hierarchy is descended, in this case, from the least-specific part
of the hostname to the most specific part, but that's just the way we chose to
do it in our policy_hierarchy. The cluster_type is defined by reg-ex's in
spine_internals/config/hostname_re

The host/ directory is not populated, but directories named after
fully-qualified host names could go here for host-specific overrides


THE INCLUDE LAYOUT

Includes are rooted at /examplecorp/config_groups based on the key
/spine-internals/config/include_dir

Looking in this directory we see it has it's own hierarchy. This hierarchy
isn't defined anywhere. Since include keys allow you to include any directory
under here you want, you can tier them as you see fit. It's not desceneded, only
the exact directy specified in 'include' keys are processed.

In this case we've chosen to have two directories internal to our config groups:

  The "class_common" tier
  We have prod/web and dev/web, but we don't want to have to duplicate configs
  that should be consistent in both of these, so both can include
  class_common/web. Hence the name - stuff common to an entire class.

  The "role" tier
  This is where most configs go, such as bind configs or ntp configs.

There is also a "global" config-examplecorp that we include at the top level as a
generic place to put all of the global stuff so that it doesn't make the
examplecorp/config directory a mess.


USING THE CONFIG
You'll need to use the 'add_sane_permissions' script in the
example_spine_config/Utils directory to add some default permissions to your
tree before attempting to use it. The FS permissions on all overlay
directories are directly translated to the permissions on the resulting file.
Once you've done that, spine can be used like this:

  spine-mgmt --dryrun --croot /path/to/example_spine_config --host <hostname>

Note that the hostname MUST resolve using DNS.


A NOTE ON PERMISSIONS AND SUBVERSION
We use subversion to manage our config tree for two main reasons: (1)
subversion provides arbitrary "properties" that can be attached to any object.
We use these to assign permissions and ownership to all overlay objects. THe
publisher than uses this data to permission the files properly in the
resulting config tree. (2) Atomic commits give us version numbers. When using
the configball publisher you then have the ability to "freeze" a box on a
release and/or rollback.




